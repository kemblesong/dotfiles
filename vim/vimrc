" VIM CONFIGURATION
" ~/.vimrc
" Kemble Song <kemblesong>
" ==============================================================================

" Map the leader key to space
let g:mapleader = "\<Space>"

" Plugins
" ==============================================================================
call plug#begin()

Plug 'rebelot/kanagawa.nvim'

Plug 'nvim-lualine/lualine.nvim'
Plug 'nvim-tree/nvim-web-devicons'

Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.1' }
  nnoremap <leader><space> <cmd>Telescope find_files<cr>
  nnoremap <leader>/ <cmd>Telescope live_grep<cr>
  nnoremap <leader>a <cmd>Telescope buffers<cr>
  nnoremap <leader>; <cmd>Telescope help_tags<cr>

Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-endwise'

Plug 'easymotion/vim-easymotion'
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_smartcase = 1
  nmap f <Plug>(easymotion-overwin-f)
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)

Plug 'w0rp/ale'
  let g:ale_linters = {
  \   'javascript': ['eslint'],
  \   'typescript': ['eslint'],
  \   'typescriptreact': ['eslint'],
  \}
  let g:ale_fixers = {
  \   'javascript': ['prettier'],
  \   'typescript': ['prettier'],
  \   'typescriptreact': ['prettier'],
  \   'scss': ['prettier'],
  \}
  let g:ale_fix_on_save = 1

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'nvim-tree/nvim-tree.lua'
  nnoremap <silent> <leader>\ :NvimTreeOpen<CR>

Plug 'tpope/vim-fugitive'
  nnoremap <leader>gs :Git status<CR>
  nnoremap <leader>gb :Git blame<CR>

Plug 'airblade/vim-gitgutter'

Plug 'ap/vim-css-color', { 'for': ['html', 'scss', 'css'] }

Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'
  let g:goyo_width = 120
  nnoremap <leader>df :Goyo<CR>
  autocmd! User GoyoEnter Limelight
  autocmd! User GoyoLeave Limelight!

Plug 'tpope/vim-surround'

Plug 'christoomey/vim-tmux-navigator'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}


call plug#end()

lua <<EOF
  require('lualine').setup()

  -- disable netrw at the very start of your init.lua (strongly advised)
  vim.g.loaded_netrw = 1
  vim.g.loaded_netrwPlugin = 1

  -- set termguicolors to enable highlight groups
  vim.opt.termguicolors = true

  -- empty setup using defaults
  require("nvim-tree").setup()
EOF

" Sensible stuff
" ==============================================================================
if has('autocmd')
  filetype plugin indent on
endif

" True color support
if has('termguicolors')
  set termguicolors
  set t_8f=[38;2;%lu;%lu;%lum
  set t_8b=[48;2;%lu;%lu;%lum
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

if !&scrolloff
  set scrolloff=1
endif

if !&sidescrolloff
  set sidescrolloff=5
endif

set display+=lastline

" UI
" ==============================================================================
set background=dark
colorscheme kanagawa
set number              " Show line numbers
" set relativenumber      " Set relative line numbers as default
set cursorline          " Highlight cursor line
set showmatch           " Show matching brackets
set showcmd             " Show command
set ruler               " Show line positions
set visualbell          " don't beep
set noerrorbells        " don't beep
set noshowmode          " don't show mode
set laststatus=2        " don't show last status
set showtabline=0       " Don't show tabline
set wildmenu

" Toggle cursor shape based on mode
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[0 q"

" Editor
" ==============================================================================
set expandtab	          " Tabs to spaces
set smarttab            " Smart tabs
set shiftwidth=2
set tabstop=2
set hlsearch            " Highlight search results.
set incsearch           " Jump to search result
set ignorecase          " Make searching case insensitive
set smartcase           " ... unless the query has capital letters.
set autoindent          " Set auto indent
set smartindent         " Set smart indent
set nowrap              " Don't wrap lines
set hidden              " Allows buffers to be hidden even if modified.
set ttimeout
set ttimeoutlen=100
set complete-=i
set backspace=indent,eol,start
highlight Comment cterm=italic

" Keybindings
" ==============================================================================
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L $
" Move to the next buffer
nnoremap <silent><leader>l :bnext<CR>
" Move to the previous buffer
nnoremap <silent><leader>h :bprevious<CR>
" Close the current buffer and move to the previous one
nnoremap <silent><leader>w :bp <BAR> bd #<CR>
" Show all open buffers and their status
nnoremap <silent><leader>bl :ls<CR>
" Clear highlight
nnoremap <silent><leader>c :noh<CR>
" Edit neovim config
nnoremap <silent><leader>ev :e<space>~/.vimrc<CR>
" Edit fish config
nnoremap <silent><leader>ez :e<space>~/.zshrc<CR>
" Edit tmux config
nnoremap <silent><leader>et :e<space>~/.tmux.conf<CR>
" Edit alacritty config
nnoremap <silent><leader>ea :e<space>~/.config/alacritty/alacritty.yml<CR>
" Save
nnoremap <silent><leader>s :w<CR>
" Quit
nnoremap <silent><leader>q :q<CR>
" Toggle relative/absolute line numbers
nnoremap <silent><leader>n :set rnu! rnu? <cr>
" ; is :
nnoremap ; :
" jk is escape
inoremap jk <esc>
" System clipboard copy/paste
vnoremap <silent><Leader>d "+d
vnoremap <silent><Leader>y "+y
vnoremap <silent><Leader>p "+p
vnoremap <silent><Leader>P "+P
nnoremap <silent><Leader>d "+d
nnoremap <silent><Leader>y "+y
nnoremap <silent><Leader>p "+p
nnoremap <silent><Leader>P "+P

" Removes trailing spaces
nnoremap <silent><Leader>t :call TrimWhiteSpace()<CR>

" Misc functions
" ==============================================================================
function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction


